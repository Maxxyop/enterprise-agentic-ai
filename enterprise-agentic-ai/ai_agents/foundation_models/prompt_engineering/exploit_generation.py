import logging
from typing import Dict, Any, Optional
from ai_agents.foundation_models.llm_interface import LLMFactory

logger = logging.getLogger(__name__)

class ExploitGenerator:
    """Generates exploit PoCs for DAST vulnerabilities using DeepSeek R1."""
    
    def __init__(self, llm_factory: LLMFactory, prompt_dir: str = "prompt_engineering/templates"):
        self.llm_factory = llm_factory
        self.prompt_dir = Path(prompt_dir)
        self.prompt_templates = self._load_templates()
        
    def _load_templates(self) -> Dict[str, str]:
        """Load exploit prompt templates from JSON files."""
        templates = {}
        template_files = ["xss_exploit.json", "sqli_exploit.json", "csrf_exploit.json"]
        try:
            for file in template_files:
                file_path = self.prompt_dir / file
                if file_path.exists():
                    with open(file_path, "r") as f:
                        templates[file] = json.load(f)["prompt"]
                else:
                    logger.warning(f"Template file {file} not found")
            return templates
        except Exception as e:
            logger.error(f"Failed to load exploit templates: {e}")
            return {}
    
    async def generate_exploit(self, vuln_type: str, target: str, params: Dict[str, Any]) -> Optional[str]:
        """Generate an exploit PoC for a specific vulnerability."""
        try:
            deepseek_client = self.llm_factory.get_client("exploit_generation")
            template_key = f"{vuln_type.lower()}_exploit.json"
            prompt_template = self.prompt_templates.get(
                template_key,
                "Generate a {vuln_type} exploit PoC for {target} with parameters: {params}"
            )
            prompt = prompt_template.format(vuln_type=vuln_type, target=target, params=json.dumps(params))
            exploit = await deepseek_client.generate(prompt, max_tokens=500)
            logger.debug(f"Generated {vuln_type} exploit for {target}")
            return exploit
        except Exception as e:
            logger.error(f"Failed to generate {vuln_type} exploit: {e}")
            return None
    
    async def validate_exploit(self, exploit: str) -> bool:
        """Validate generated exploit syntax."""
        try:
            # Basic validation (extend for security checks)
            if not exploit or "error" in exploit.lower():
                return False
            return True
        except Exception as e:
            logger.error(f"Exploit validation failed: {e}")
            return False

async def main():
    """Example usage of ExploitGenerator."""
    llm_factory = LLMFactory()
    generator = ExploitGenerator(llm_factory)
    exploit = await generator.generate_exploit(
        vuln_type="xss",
        target="shop.example.com/login",
        params={"input_field": "username", "payload": "<script>alert('xss')</script>"}
    )
    print(f"XSS Exploit: {exploit}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())