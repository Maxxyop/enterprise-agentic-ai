import requests

class ExploitDBIntegration:
    def __init__(self, api_key=None):
        self.api_key = api_key
        self.base_url = "https://www.exploit-db.com/api/v1/"

    def search_exploits(self, query):
        """Search for exploits based on a query."""
        response = requests.get(f"{self.base_url}exploits/search", params={"query": query, "api_key": self.api_key})
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error fetching data from Exploit-DB: {response.status_code}")

    def get_exploit_details(self, exploit_id):
        """Fetch details of a specific exploit."""
        response = requests.get(f"{self.base_url}exploits/{exploit_id}", params={"api_key": self.api_key})
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error fetching exploit details: {response.status_code}")

    def list_exploits(self):
        """List all available exploits."""
        response = requests.get(f"{self.base_url}exploits", params={"api_key": self.api_key})
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error fetching exploits list: {response.status_code}")

    def fetch_exploit(self, exploit_id):
        """Stub fetch_exploit method for testing."""
        return {"exploit_id": exploit_id, "description": "Test Exploit"}

# Example usage:
# exploit_db = ExploitDBIntegration(api_key="your_api_key_here")
# exploits = exploit_db.search_exploits("SQL injection")
# print(exploits)