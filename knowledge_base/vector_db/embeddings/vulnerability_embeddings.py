import numpy as np

class VulnerabilityEmbeddings:
    def __init__(self, embedding_size=128):
        self.embedding_size = embedding_size
        self.embeddings = {}

    def add_embedding(self, vulnerability_id, embedding_vector):
        if len(embedding_vector) != self.embedding_size:
            raise ValueError(f"Embedding vector must be of size {self.embedding_size}.")
        self.embeddings[vulnerability_id] = np.array(embedding_vector)

    def get_embedding(self, vulnerability_id):
        return self.embeddings.get(vulnerability_id, None)

    def similarity(self, embedding_vector1, embedding_vector2):
        return np.dot(embedding_vector1, embedding_vector2) / (np.linalg.norm(embedding_vector1) * np.linalg.norm(embedding_vector2))

    def find_similar(self, target_embedding, threshold=0.8):
        similar_vulnerabilities = []
        for vuln_id, embedding in self.embeddings.items():
            sim_score = self.similarity(target_embedding, embedding)
            if sim_score >= threshold:
                similar_vulnerabilities.append((vuln_id, sim_score))
        return sorted(similar_vulnerabilities, key=lambda x: x[1], reverse=True)